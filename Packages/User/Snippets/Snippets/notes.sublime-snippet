<snippet>
    <content><![CDATA[     
Commands:
increase stack size to 1GB in linux: ulimit -u 1048576
command to see resources used by your program: /usr/bin/time -v sol.out <in >out

Bit manipulation:
x | (x + 1) sets lowest unset bit of x
x & (x - 1) unsets lowest set bit of x
x - 1 unsets the lowest set bit and sets all bits on its right
63 - __builtin_clzll(x) // largest_bit
__builtin_ctzll(x) // lowest_bit

GDB(find line number causing seg fault):
dbrun sol
gdb ./sol.out (or, lldb ./sol.out)
run (or, r)
backtrace (or, bt)

Optimisation Techniques:
1 - assign an empty container instead of clearing it
    vector<int> v;
    Nope: 
        v.clear();
    Yep: 
        v = new vector<int>();

2 - Keep a reference to those container's state which doesn't support O(1) access
    map<int, int> mp;
    Nope:
        mp[x]++;
        a = mp[x] * (mp[x] - 1) / 2;
        we accessed mp[x] three times, so it searched for x in mp all those three times
    Yep:
        auto &val = mp[x];
        val++;
        a = val * (val - 1) / 2;
        here we searched for x in mp only once
        
How do I
1 - declare set with a custom comparator?
    auto comp = [&] (auto &x, auto &y) {
            return make_tuple(v[x.first], -v[x.second], x.first, x.second) < make_tuple(v[y.first], -v[y.second], y.first, y.second);
        };
    set<pair<int, int>, decltype(comp)> st(comp);
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>snippet_notes</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
