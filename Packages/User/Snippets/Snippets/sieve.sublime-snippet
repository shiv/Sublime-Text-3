<snippet>
	<content><![CDATA[
vector<int> spf(N, 0);
${1:vector<int> unique_primes(N, 0);}
vector<bool> prime(N, true);
vector<int> primes;
void sieve() {
    prime[0] = prime[1] = false;
    for(int i = 2; i < N; i++) {
        if(prime[i]) {
            spf[i] = i;
            primes.push_back(i);
        \}
        int prod;
        for(int j = 0; j < (int) primes.size() && primes[j] <= spf[i] && (prod = primes[j] * i) < N; j++) {
            spf[prod] = primes[j];
            prime[prod] = false;
        \}
    \}
    ${2:for(int i = 2; i < N; i++) {
        int p = spf[i];
        unique_primes[i] = unique_primes[i / p] + ((i / p) % p != 0);
    \}}
\}

${3:void prime_factorise(int num, vector<pair<int, int>> &prime_factors) {
    while(num > 1) {
        int factor = spf[num];
        int cnt = 0;
        while(spf[num] == factor) {
            num /= factor;
            cnt++;
        \}
        prime_factors.emplace_back(factor, cnt);
    \}
\};

void factorise(int num, vector<int> &factors) {
    factors.emplace_back(1);
    while(num > 1) {
        int factor = spf[num];
        int cnt = 0;
        int p = 1;
        int sz = factors.size();
        while(spf[num] == factor) {
            num /= factor;
            p *= factor;
            for (int i = 0; i < sz; i++) {
                factors.emplace_back(factors[i] * p);
            \}
            cnt++;
        \}
    \}
\};}$0
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>snippet_sieve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
