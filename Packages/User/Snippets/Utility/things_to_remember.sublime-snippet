<snippet>
    <content><![CDATA[
#define fps(x, y)       fixed << setprecision(y) << x
#define Time()          output << "[Execution : " << (1.0 * clock()) / CLOCKS_PER_SEC << "s]\n"

#undef _GLIBCXX_DEBUG

const int mod = 998244353;

struct compare {
    bool operator() (const pair<int, int> &value, const int &key) {
        return value.first < key;
    }
    bool operator() (const int &key, const pair<int, int> &value) {
        return key < value.first;
    }
};

std::string binary = std::bitset<8>(n).to_string(); // convert decimal to binary
unsigned long decimal = std::bitset<8>(binary).to_ulong();  // convert binary to decimal

template<typename... T>
void read(T&... args) {
    ((cin >> args), ...);
}

template<typename... T>
void write(T&&... args) { //rvalue reference is new to C++
    ((cout << args << " "), ...);
}

/*
There is no difference. They both declare "a" to be an integer that cannot be changed.

The place where differences start to appear is when you use pointers.

Both of these:
    const int *a
    int const *a
declare "a" to be a pointer to an integer that doesn't change. "a" can be assigned to, but "*a" cannot.

    int * const a
declares "a" to be a constant pointer to an integer. "*a" can be assigned to, but "a" cannot.

    const int * const a
declares "a" to be a constant pointer to a constant integer. Neither "a" nor "*a" can be assigned to.
*/

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>things_to_remember</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
