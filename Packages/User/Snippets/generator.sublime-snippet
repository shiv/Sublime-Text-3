<snippet>
    <content><![CDATA[
#include <bits/stdc++.h>
using namespace std;

template <typename T> ostream& operator<<(ostream& out, vector<T>& a) { bool f = false; for (T& x : a) { if (f) out << " "; out << x; f = true; } return out; }
template <typename T> ostream& operator<<(ostream& out, vector<vector<T>>& a) { bool f = false; for (vector<T>& x : a) { if (f) out << "\n"; out << x; f = true; } return out; }

void print() { cout << '\n'; }
template <typename Head> void print(Head H) { cout << H; print(); }
template <typename Head, typename... Tail> void print(Head H, Tail... T) { cout << H << " "; print(T...); }

static mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand_int(int a, int b) {
    return uniform_int_distribution<int>(a, b)(rng);
}

void tree(int n) {
    vector<pair<int,int>> edges;
    for(int i = 2; i <= n; ++i) {
        edges.emplace_back(rand_int(1, i - 1), i);
    }

    vector<int> perm(n + 1); // re-naming vertices
    for(int i = 1; i <= n; ++i) {
        perm[i] = i;
    }
    random_shuffle(perm.begin() + 1, perm.end());

    random_shuffle(edges.begin(), edges.end()); // random order of edges

    for(pair<int, int> edge : edges) {
        int a = edge.first, b = edge.second;
        if(rand() % 2) {
            swap(a, b); // random order of two vertices
        }
        cout << perm[a] << " " << perm[b] << '\n';
    }
}

int main() {
    int t = 1;
    int n = rand_int(2, 7);
    vector<int> v(n);
    for (int i = 0; i < n; i++)
        v[i] = rand_int(2, 10);

    // print(t);
    // print(n);
    // print(v);
    // tree(n);
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>generator</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
